Que 1. What ia HTTP Protocol

Ans:-

-HTTP, or Hypertext Transfer Protocol, is the foundation of data communication on the World Wide Web. 
-It is an application layer protocol that enables the transfer of hypermedia, such as HTML documents, between clients and servers. 
-Developed by Tim Berners-Lee in the early 1990s, HTTP is a stateless protocol, meaning that 
each request from a client to a server is independent, and the server does not retain any information about the client's previous requests.

Key features of the HTTP protocol include:

1) Client-Server Model: 
HTTP operates on a client-server model, where a client (typically a web browser) sends requests to a server, and the server responds with the requested information.

2) Request-Response: 
Communication in HTTP is based on a request-response paradigm. 
A client sends an HTTP request to a server, specifying the desired action, and the server responds with the requested data or an indication of success or failure.

3) Stateless: 
HTTP is stateless, meaning that each request from a client to a server is treated as an independent transaction. The server does not retain information about the client's previous requests.

4) Connectionless:  
                                                                                                                                                                                                                                                                                                                                                                                                                      HTTP is also connectionless, which means that a connection between the client and server is established only for the duration of a single request-response cycle. After the response is sent, the connection is closed.

5) Text-Based: 
HTTP messages are text-based, and they consist of a request line, headers, and an optional body. 
The headers provide additional information about the request or response, such as content type, length, and more.

6) Methods: 
HTTP defines several methods or verbs that indicate the desired action to be performed. 
Common methods include GET (retrieve a resource), POST (submit data to be processed), PUT (update a resource), DELETE (remove a resource), and more.

7) Status Codes: 
HTTP responses include status codes that indicate the outcome of the request. For example, a status code of 200 indicates success, while 404 indicates that the requested resource was not found.
-------------------------------------------------------------------------------------------------------
Que. What are contents of request and response ?

Ans:-

HTTP Request:

1) Request Line: GET /example/index.html HTTP/1.1

-Method: Specifies the HTTP method used (e.g., GET, POST, PUT, DELETE).
-URI (Uniform Resource Identifier): Specifies the resource (URL) the client is requesting.
-HTTP Version: Specifies the version of the HTTP protocol being used.

2) Headers:

-Various metadata about the request, such as the type of browser, accepted content types, and more.
eg.
Host: www.example.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8

3) Body:

-Optional. Used for sending data to the server, primarily in methods like POST or PUT.
eg.
POST /example/formsubmit HTTP/1.1
Content-Type: application/x-www-form-urlencoded
key1=value1&key2=value2


HTTP Response:

1) Status Line: HTTP/1.1 200 OK

-HTTP Version: Specifies the version of the HTTP protocol being used.
-Status Code: A three-digit code indicating the result of the request (e.g., 200 OK, 404 Not Found, 500 Internal Server Error).
-Reason Phrase: A human-readable explanation of the status code.

2) Headers:

-Similar to request headers, providing information about the response, such as content type, server information, and more.
eg.
Content-Type: text/html; charset=utf-8
Server: Apache/2.4.29 (Unix) PHP/7.2.24

3) Body:

-Contains the actual data returned by the server. This could be HTML content, JSON data, or any other format depending on the request.

	These are the fundamental components of HTTP requests and responses, and they allow clients and servers to communicate effectively over the web.

===========================================================================================
Que 2. Why HTTP is called as connectionless protocol

Ans:-

-HTTP (Hypertext Transfer Protocol) is often referred to as a "connectionless" protocol because, in its default state, it does not maintain a persistent connection between the client and the server. 
-Each request from a client to a server and each corresponding response from the server to the client is considered an independent transaction. 
-After the server sends a response to a client, the connection is closed.

The key characteristics that contribute to HTTP being connectionless are:

1) No Persistent Connection:

-After a request-response cycle is complete, the connection is closed. 
-There is no ongoing, dedicated connection between the client and the server.
This approach contrasts with protocols like FTP (File Transfer Protocol) or SMTP (Simple Mail Transfer Protocol), which can maintain persistent connections for multiple transactions.

2) Statelessness:

-HTTP is also described as a "stateless" protocol. This means that each request from a client to a server is treated as an independent and isolated transaction.
-The server does not retain any information about the client's previous requests. 
-Each request is processed based solely on the information provided in that specific request.

-The connectionless nature of HTTP simplifies the implementation and management of web communications. 
-It allows for quick setup and teardown of connections, reducing the resources required on both the client and server sides. 
-However, it also means that if a client needs to maintain a session or share state information between multiple requests, additional mechanisms such as cookies or session tokens are typically employed.

-It's worth noting that while HTTP itself is connectionless, web browsers and servers can use techniques like persistent connections (HTTP keep-alive) and connection pooling to optimize performance by reusing existing connections for multiple requests.
------------------------------------------------------------------------------------
Que. why it is called as stateless protocol ?

Ans:-
-HTTP (Hypertext Transfer Protocol) is often referred to as a "stateless" protocol because it does not maintain any state information between requests. 
-Each request from a client to a server is treated as an independent transaction, and the server does not retain any knowledge of previous requests made by the same client. 
-This lack of awareness of past interactions between the client and server is what characterizes HTTP as stateless. 

There are a few key reasons for this statelessness:

1) Independence of Requests:

-Each HTTP request sent by a client to a server is self-contained and includes all the information necessary for the server to understand and process the request.
-The server does not rely on any information from previous requests made by the same client. 
-As a result, each request is processed in isolation.

2) No Server Memory of Client State:

-The server does not retain any memory of the client's state or previous interactions. 
-It treats each incoming request as if it is the first request from that client.
-This statelessness simplifies server implementation and allows servers to handle requests from a large number of clients without the need for extensive memory resources to store individual client states.

3) Scalability:

-Stateless communication contributes to the scalability of the web. 
-Servers can easily handle a large number of clients simultaneously because each request is independent and does not require the server to maintain ongoing connections or state information.


-While the statelessness of HTTP simplifies server implementation and supports scalability, it also poses challenges for applications that require the server to remember user-specific information between multiple requests. 
-To address this, additional mechanisms such as cookies, session tokens, or server-side storage are often used to establish and maintain user sessions and state across multiple HTTP transactions. 
-These mechanisms enable stateful behavior in what is fundamentally a stateless protocol.

===========================================================================================

Que 3. what is state managment? Explain server side and client side state management objects.

Ans:-

State Management:

-In the context of web development, state management refers to the process of maintaining and tracking the state or information about a user or application across multiple requests or interactions. 
-Since HTTP, the underlying protocol of the web, is stateless (as discussed earlier), web applications often require mechanisms to manage and maintain state information.

There are two primary approaches to state management: server-side and client-side.

# Server-Side State Management:

1) Session Management:

-Sessions involve the creation of a unique session identifier for each user, which is stored on the server. 
-The server can associate user-specific information with this session identifier.
-Session data is often stored in server-side data stores, such as databases or in-memory caches.

2) Application State:

-Application state involves storing information that is common to all users of an application. 
-This data is shared across multiple sessions and users.
-Application state is typically stored on the server, and it can be accessed by different clients.

3) Database Storage:

Persistent data storage in databases allows the server to store and retrieve state information across multiple requests and even when the server is restarted.

# Client-Side State Management:

1) Cookies:

-Cookies are small pieces of data sent by the server and stored on the client's browser. 
-They can store key-value pairs and are sent back to the server with each subsequent request.
-Cookies are commonly used for user authentication, tracking user preferences, and maintaining session information.

2) Local Storage and Session Storage:

-HTML5 introduced the localStorage and sessionStorage APIs, which allow client-side storage of data. 
-This data persists across browser sessions in the case of localStorage and only for the duration of a page session for sessionStorage.
-These storage mechanisms are useful for storing larger amounts of data on the client side.

3) Client-Side Frameworks:

-Modern JavaScript frameworks and libraries often include their own client-side state management solutions. 
-These can include features like reactive state management, where changes in the state trigger updates to the user interface.

=====================================================================================================

Que 4. Which are HTTP request methods? Explain Difference Between GET and POST methods.

Ans:-
HTTP (Hypertext Transfer Protocol) defines several request methods, each serving a different purpose in communication between clients and servers. 

The main HTTP request methods are:

1) GET:

-The GET method is used to request data from a specified resource.
-Parameters and data are sent in the URL's query string.
-It is a safe and idempotent method, meaning it should not have side effects on the server, and multiple identical requests should produce the same result as a single request.
-It is suitable for retrieving information and should not be used for actions that may have side effects.

-eg . 
GET /example/resource?id=123 HTTP/1.1

2) POST:

-The POST method is used to submit data to be processed to a specified resource.
-Parameters and data are sent in the request body, not in the URL.
-It is not necessarily safe or idempotent, and it can be used for actions that may have side effects on the server.
-It is suitable for creating or updating resources on the server.

-eg.
POST /example/create HTTP/1.1
Content-Type: application/x-www-form-urlencoded
key1=value1&key2=value2

3) PUT:

-The PUT method is used to update a resource or create a new resource if it does not exist at the specified URI.
-It is idempotent, meaning that making multiple identical requests should have the same effect as a single request.
-The request body contains the data to be updated or created.

-eg .
PUT /example/update/123 HTTP/1.1
Content-Type: application/json

{
  "name": "Updated Resource"
}


4) DELETE:

-The DELETE method is used to request the removal of a resource identified by a given URI.
-It is idempotent, meaning that making multiple identical requests should have the same effect as a single request.

-eg
DELETE /example/resource/123 HTTP/1.1


5) PATCH:

-The PATCH method is used to apply partial modifications to a resource.
-It is typically used when you want to apply a partial update to a resource on the server.

-eg
PATCH /example/modify/123 HTTP/1.1
Content-Type: application/json

{
  "partial_update": true
}

-These HTTP methods allow clients to interact with server resources in different ways, and the choice of method depends on the desired action and the nature of the request. 
-The main difference between GET and POST lies in how they handle data transmission: GET appends data to the URL, while POST sends data in the request body. 
-Additionally, GET is typically used for safe, read-only operations, while POST is used for operations that may modify server data.

==================================================================================================

Que 5. What is difference between HTTP and HTTPS? What is SSL?	
 
Ans:-

# HTTP (Hypertext Transfer Protocol):

-HTTP is the foundation of data communication on the World Wide Web.
-It is an application layer protocol that facilitates the transfer of data between a client (such as a web browser) and a server.
-Data exchanged between the client and server is transmitted in plaintext, making it vulnerable to interception and tampering.

# HTTPS (Hypertext Transfer Protocol Secure):

-HTTPS is the secure version of HTTP and is designed to provide a secure and encrypted communication channel between a client and a server.
-It uses a combination of HTTP and a secure protocol called SSL/TLS to encrypt data during transmission.
-The "S" in HTTPS stands for "Secure," and it indicates that the communication is encrypted to protect sensitive information.

# SSL (Secure Sockets Layer) and TLS (Transport Layer Security):

-SSL and TLS are cryptographic protocols that provide secure communication over a computer network, commonly the internet.
-SSL was the original protocol developed by Netscape, but due to vulnerabilities, it has been largely replaced by its successor, TLS.
-TLS is an updated and more secure version of SSL, and both terms are often used interchangeably.

Key Differences bertween HTTP and HTTPS:

1) Security:

-HTTP is not secure; data transmitted over HTTP is in plaintext and can be intercepted by attackers.
-HTTPS uses SSL/TLS to encrypt the data, providing a secure and confidential channel, protecting against eavesdropping and tampering.

2) Port Number:

-HTTP typically uses port 80 for communication.
-HTTPS typically uses port 443. The use of a different port helps distinguish secure and non-secure traffic.

3) Protocol:

-HTTP uses a plain text protocol.
-HTTPS uses a combination of HTTP and SSL/TLS to provide encryption and secure communication.

4) URL Scheme:

-HTTP URLs begin with "http://".
-HTTPS URLs begin with "https://".

5) Authentication:

-HTTPS can provide a level of authentication, ensuring that the client is connecting to the intended server. This is achieved through digital certificates.


-In summary, HTTPS is an extension of HTTP that adds a layer of security through the use of SSL/TLS protocols. 
-It encrypts data in transit, making it more difficult for malicious actors to intercept or tamper with the information being exchanged between the client and server.

=======================================================================================================

Que 6. What is Difference Between HTML4 and HTML5 ?

Ans:-
HTML (Hypertext Markup Language) has evolved over the years, and HTML5 is the latest version as of my last knowledge update in January 2022.

Here are some key differences between HTML4 and HTML5:

1) DOCTYPE Declaration:

-HTML4 requires a specific Document Type Definition (DOCTYPE) declaration at the beginning of the document to define its version and structure.
-HTML5 has a simplified and standardized DOCTYPE declaration (<!DOCTYPE html>), making it more consistent and easier to use.

2) Parsing Rules:

-HTML5 parsing rules are more lenient compared to HTML4, allowing browsers to interpret and display content even if there are errors in the markup. 
-This helps in better backward compatibility and error handling.

3) New Elements:

-HTML5 introduces several new structural elements, such as <article>, <section>, <header>, <nav>, <footer>, and <aside>. 
-These elements provide more semantic meaning to the structure of a web page, making it easier for developers and browsers to understand the content.

4) New Form Input Types:

-HTML5 includes new input types for forms, such as <input type="email">, <input type="url">, <input type="tel">, and <input type="date">. 
-These input types improve the user experience and help in input validation.

5) Audio and Video Support:

-HTML5 introduces native support for embedding audio and video content using the <audio> and <video> elements, eliminating the need for third-party plugins like Flash.

6) Canvas Element:

-HTML5 introduces the <canvas> element, which provides a drawing space for graphics and animations. 
-This enables developers to create dynamic and interactive content without relying heavily on plugins.

7) Local Storage:

-HTML5 includes features for local storage (Web Storage), allowing web applications to store data locally on the user's device. 
-This is useful for offline access and improved performance.

8) Improved Semantics:

-HTML5 introduces more semantic elements, making it easier for search engines to understand the structure and content of web pages. 
-Examples include <header>, <nav>, <article>, and <section>.

9) Responsive Design:

-HTML5 supports responsive design with features like the <meta name="viewport"> tag, which helps in optimizing web pages for different devices and screen sizes.

10) Geolocation API:

-HTML5 includes the Geolocation API, allowing websites to request the user's location information, which can be useful for location-based services.


-HTML5 brings several enhancements, new features, and improved support for modern web development practices. 
-Developers are encouraged to use HTML5 for creating contemporary and feature-rich web applications.

===========================================================================================================

Que 7. What is Difference Between CSS,SCSS and SASS ?

Ans:-

-CSS (Cascading Style Sheets), SCSS (Sassy CSS), and Sass (Syntactically Awesome Stylesheets) are all style sheet languages used for describing the look and formatting of a document written in a markup language like HTML. 

Here are the main differences between CSS, SCSS, and Sass:

1) CSS (Cascading Style Sheets):

-Syntax: simple syntax with selectors, properties, and values.
-File Extension: .css 
-Usage: Styling web pages and is the standard style sheet language for the web.

-Example:

	body {
	    font-family: Arial, sans-serif;
	    color: #333;
	}

	h1 {
	    font-size: 24px;
	    color: #0066cc;
	}

2) Sass:
Sass provides additional features like variables, nesting, and mixins, making it more powerful than CSS. However, its syntax can be less familiar for developers used to traditional CSS.

-Syntax: Sass is an older syntax with a more concise and indentation-based syntax (similar to Python). It doesn't use braces or semicolons.
-File Extension: .sass 
-Usage: Styling web pages.

-Example:

	body
	  font-family: Arial, sans-serif
	  color: #333

	h1
	  font-size: 24px
	  color: #0066cc

3) SCSS (Sassy CSS):
SCSS is widely adopted because it combines the features of Sass with a syntax that is closer to traditional CSS, making it more accessible for developers.

-Syntax: SCSS is a newer syntax and is an extension of CSS. It uses a more CSS-like syntax with braces and semicolons, making it easier for developers to transition from CSS to SCSS.
-File Extension: .scss
Usage: Styling web pages.

-Example:

	body {
    		font-family: Arial, sans-serif;
    		color: #333;
    	}

	h1 {
	    font-size: 24px;
	    color: #0066cc;
	}

-In summary, Sass introduced a more powerful and expressive way to write styles with features like variables, nesting, and mixins. 
-SCSS is an extension of Sass that uses a syntax closer to traditional CSS, making it easier for developers to adopt. 
-Both Sass and SCSS need to be compiled into standard CSS before being used in web development. 
-The choice between Sass and SCSS often depends on personal preference and the development team's familiarity with the syntax.

=============================================================================================

Que 9. What is DOM? Explain in context of HTML page.

Ans:-

-DOM stands for Document Object Model. 
-In the context of an HTML page, the DOM is a programming interface that represents the structure and content of a document as a tree-like structure. 
-This tree-like structure consists of objects, each representing a part of the document, such as elements, attributes, and text content.

-When a web browser loads an HTML page, it creates a DOM representation of that page. 
-The DOM provides a way for programs (typically written in JavaScript) to interact with and manipulate the content and structure of the HTML document dynamically. 
-It serves as an interface between the HTML document and the programming language, allowing developers to modify, add, or delete elements and attributes on the fly.

Here's a brief overview of how the DOM works in the context of an HTML page:

1) Document Object:

The top-level object in the DOM hierarchy is the document object, which represents the entire HTML document.

2) Element Nodes:

HTML elements (e.g., <div>, <p>, <h1>) are represented as element nodes in the DOM tree.

3) Attribute Nodes:

Attributes of HTML elements become attribute nodes in the DOM.

4) Text Nodes:

The text content within HTML elements becomes text nodes in the DOM.

-By using JavaScript, developers can traverse the DOM tree, access specific elements, modify their content or attributes, add new elements, and respond to user interactions. 
-This dynamic interaction with the DOM is a fundamental aspect of creating interactive and responsive web pages.
======================================================================================

Que 10. What is Difference between LocalStorage and Session Storage? How to use them in JS code ?

Ans:-

-localStorage and sessionStorage are both web storage options provided by modern web browsers to store data on the client side. 

They are similar in many ways but have some key differences:

1) Scope:

-localStorage: The data stored in localStorage persists even after the browser is closed and reopened. It has a longer lifetime and is available across browser 

-sessions.
sessionStorage: The data stored in sessionStorage is only available for the duration of the page session. Once the browser tab or window is closed, the data is cleared.

2) Storage Limit:

-Both localStorage and sessionStorage typically have a storage limit of around 5-10 MB per domain.

Example:-

	# Local Storage:

	localStorage.setItem('key', 'value');

	const retrievedValue = localStorage.getItem('key');

	localStorage.removeItem('key');

	localStorage.clear();


	# Session Storage:

	sessionStorage.setItem('key', 'value');

	const retrievedValue = sessionStorage.getItem('key');

	sessionStorage.removeItem('key');

	sessionStorage.clear();


-Both localStorage and sessionStorage follow a key-value pair storage model. 
-You can store strings as values, but if you want to store objects or arrays, you should stringify them using JSON.stringify() when storing and parse them using JSON.parse() when retrieving.

Example:
	// Storing an object in localStorage
	const user = { name: 'John', age: 25 };
	localStorage.setItem('user', JSON.stringify(user));

	// Retrieving and parsing the object from localStorage
	const retrievedUser = JSON.parse(localStorage.getItem('user'));

========================================================================================

Que 11. What is difference between '==' and '===' operator in JavaScript?

Ans:-
In JavaScript, '==' and '===' are comparison operators used to compare values.

However, they have different behaviors:

1) '==' (Equality Operator):

-The '==' operator performs type coercion, which means it tries to convert the operands to the same type before making the comparison.
-If the types are different, JavaScript will attempt to convert one or both values to a common type.
-After the conversion, it performs the comparison.

Example:-

	'5' == 5 // true, as the string '5' is coerced to the number 5
	1 == true // true, as the boolean true is coerced to the number 1

2) '===' (Strict Equality Operator):

-The === operator, also known as the strict equality operator, does not perform type coercion.
-It compares both the value and the type of the operands. The values must be of the same type and have the same value to be considered equal.

Example:-

	'5' === 5 // false, as the types are different (string vs number)
	1 === true // false, as the types are different (number vs boolean)

-In general, it is recommended to use the === operator for equality comparisons in JavaScript because it avoids unexpected type coercion. 
-Using === helps ensure that both the values and their types are identical for the comparison to evaluate to true. 
-This can lead to more predictable and less error-prone code.

Example:-

	const x = '5';
	const y = 5;

	console.log(x == y);  // true (after type coercion)
	console.log(x === y); // false (no type coercion)

In most cases, it is good practice to use === for strict equality comparisons, unless you specifically need the type coercion behavior provided by ==.

====================================================================================

Que 12. what are different ways of writing functions in JavaScript?

Ans:-

In JavaScript, there are several ways to define functions. 
Here are the different ways:

1) Function Declaration:

code :-
	function add(a, b) {
	    return a + b;
	}
----------------------------------------	
2) Function Expression:

code:-
	const subtract = function(a, b) {
	    return a - b;
	};
-----------------------------------------	
3) Arrow Function Expression:

code:-
	const multiply = (a, b) => a * b;
-----------------------------------------
4) Function Constructor:

code:-
	const divide = new Function('a', 'b', 'return a / b');
	
Note: Using the Function constructor is less common and not recommended due to security and performance considerations.
--------------------------------------------------
5) Anonymous Function:

-Functions without a name can be created and assigned to variables or passed as arguments to other functions.

code:-
	const anonymousFunction = function(a, b) {
	    return a * b;
	};
---------------------------------------------------
6) Immediately Invoked Function Expression (IIFE):

-A function that is defined and immediately executed.

code:-
	(function() {
	    console.log('I am an IIFE');
	})();
------------------------------------------------------
7) Named Function Expression:

Similar to a function expression, but with a name.

code:- 
	const factorial = function factorial(n) {
	    return n <= 1 ? 1 : n * factorial(n - 1);
	};
-------------------------------------------------------
8) Arrow Function with Block Body:

Arrow functions can also have a block body when more than one statement is needed.

code:-
	const greet = (name) => {
	    console.log('Hello, ' + name + '!');
	};

--------------------------------------------------------

-Choosing the appropriate way to define a function depends on the specific use case and the desired behavior. 
-Arrow functions are concise and often preferred for simple operations, while function declarations and expressions offer more flexibility. 
-IIFE is commonly used for creating a private scope. 
-The choice may also depend on the coding style of the project or team.

==============================================================================================

Que 13. What is jQuery? What is advantage?

Ans:-

-jQuery is a fast, lightweight, and feature-rich JavaScript library designed to simplify tasks like HTML manipulation, event handling, animation, and AJAX (Asynchronous JavaScript and XML) requests. 
-It provides a cross-browser-compatible abstraction over many common tasks, making it easier for developers to write concise and efficient code.

Advantages of using jQuery include:

1) Simplified Syntax:

-jQuery simplifies complex JavaScript tasks with a concise and easy-to-understand syntax. 
-It abstracts away many of the browser inconsistencies and complexities, allowing developers to write code more quickly.

2) Cross-Browser Compatibility:

-jQuery handles many cross-browser compatibility issues, making it easier to write code that works consistently across different browsers. 
-This reduces the need for developers to write browser-specific code.

3) DOM Manipulation:

-jQuery provides powerful methods for manipulating the Document Object Model (DOM). -Selecting and manipulating HTML elements, modifying content, and handling events become more straightforward with jQuery.

4) Event Handling:

-jQuery simplifies event handling by providing a unified interface for attaching and handling events. 
-This makes it easier to manage user interactions and create dynamic web pages.

5) AJAX Support:

-jQuery simplifies the process of making asynchronous requests with AJAX. 
-It abstracts away the complexity of handling XMLHttpRequest objects and provides a simpler interface for making HTTP requests, handling responses, and updating the DOM accordingly.

6) Animation Effects:

-jQuery includes built-in methods for creating animations and transitions. 
-Developers can easily add effects such as fading, sliding, and toggling without having to write complex animation code manually.

7) Plugin Architecture:

-jQuery has a thriving ecosystem of plugins that extend its functionality. 
-These plugins cover a wide range of features, allowing developers to easily integrate additional functionality into their projects.

8) Community and Documentation:

-jQuery has a large and active community, which means that there is a wealth of resources, tutorials, and documentation available. 
-Developers can find support, share knowledge, and leverage existing solutions.

	While jQuery was extremely popular in the past, it's worth noting that modern JavaScript and the evolution of web standards have reduced the need for jQuery in many scenarios. 
-Modern browsers have improved their compatibility, and the native JavaScript language and DOM manipulation capabilities have become more powerful and standardized. 
-As a result, developers may choose to use native JavaScript or other libraries/frameworks (e.g., React, Vue.js) for building modern web applications.

================================================================================================

Que 14. What is AJAX ? How to use it with and without jQuery ?

Ans:-













